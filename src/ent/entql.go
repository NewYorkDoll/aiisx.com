// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"aiisx.com/src/ent/githubevent"
	"aiisx.com/src/ent/githubrepository"
	"aiisx.com/src/ent/label"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   githubevent.Table,
			Columns: githubevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: githubevent.FieldID,
			},
		},
		Type: "GithubEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			githubevent.FieldEventID:   {Type: field.TypeString, Column: githubevent.FieldEventID},
			githubevent.FieldEventType: {Type: field.TypeString, Column: githubevent.FieldEventType},
			githubevent.FieldCreatedAt: {Type: field.TypeTime, Column: githubevent.FieldCreatedAt},
			githubevent.FieldPublic:    {Type: field.TypeBool, Column: githubevent.FieldPublic},
			githubevent.FieldActorID:   {Type: field.TypeInt64, Column: githubevent.FieldActorID},
			githubevent.FieldActor:     {Type: field.TypeJSON, Column: githubevent.FieldActor},
			githubevent.FieldRepoID:    {Type: field.TypeInt64, Column: githubevent.FieldRepoID},
			githubevent.FieldRepo:      {Type: field.TypeJSON, Column: githubevent.FieldRepo},
			githubevent.FieldPayload:   {Type: field.TypeJSON, Column: githubevent.FieldPayload},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   githubrepository.Table,
			Columns: githubrepository.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: githubrepository.FieldID,
			},
		},
		Type: "GithubRepository",
		Fields: map[string]*sqlgraph.FieldSpec{
			githubrepository.FieldRepoID:        {Type: field.TypeInt64, Column: githubrepository.FieldRepoID},
			githubrepository.FieldName:          {Type: field.TypeString, Column: githubrepository.FieldName},
			githubrepository.FieldFullName:      {Type: field.TypeString, Column: githubrepository.FieldFullName},
			githubrepository.FieldOwnerLogin:    {Type: field.TypeString, Column: githubrepository.FieldOwnerLogin},
			githubrepository.FieldOwner:         {Type: field.TypeJSON, Column: githubrepository.FieldOwner},
			githubrepository.FieldPublic:        {Type: field.TypeBool, Column: githubrepository.FieldPublic},
			githubrepository.FieldHTMLURL:       {Type: field.TypeString, Column: githubrepository.FieldHTMLURL},
			githubrepository.FieldDescription:   {Type: field.TypeString, Column: githubrepository.FieldDescription},
			githubrepository.FieldFork:          {Type: field.TypeBool, Column: githubrepository.FieldFork},
			githubrepository.FieldHomepage:      {Type: field.TypeString, Column: githubrepository.FieldHomepage},
			githubrepository.FieldStarCount:     {Type: field.TypeInt, Column: githubrepository.FieldStarCount},
			githubrepository.FieldDefaultBranch: {Type: field.TypeString, Column: githubrepository.FieldDefaultBranch},
			githubrepository.FieldIsTemplate:    {Type: field.TypeBool, Column: githubrepository.FieldIsTemplate},
			githubrepository.FieldHasIssues:     {Type: field.TypeBool, Column: githubrepository.FieldHasIssues},
			githubrepository.FieldArchived:      {Type: field.TypeBool, Column: githubrepository.FieldArchived},
			githubrepository.FieldPushedAt:      {Type: field.TypeTime, Column: githubrepository.FieldPushedAt},
			githubrepository.FieldCreatedAt:     {Type: field.TypeTime, Column: githubrepository.FieldCreatedAt},
			githubrepository.FieldUpdatedAt:     {Type: field.TypeTime, Column: githubrepository.FieldUpdatedAt},
			githubrepository.FieldLicense:       {Type: field.TypeJSON, Column: githubrepository.FieldLicense},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   label.Table,
			Columns: label.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: label.FieldID,
			},
		},
		Type:   "Label",
		Fields: map[string]*sqlgraph.FieldSpec{},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (geq *GithubEventQuery) addPredicate(pred func(s *sql.Selector)) {
	geq.predicates = append(geq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GithubEventQuery builder.
func (geq *GithubEventQuery) Filter() *GithubEventFilter {
	return &GithubEventFilter{config: geq.config, predicateAdder: geq}
}

// addPredicate implements the predicateAdder interface.
func (m *GithubEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GithubEventMutation builder.
func (m *GithubEventMutation) Filter() *GithubEventFilter {
	return &GithubEventFilter{config: m.config, predicateAdder: m}
}

// GithubEventFilter provides a generic filtering capability at runtime for GithubEventQuery.
type GithubEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GithubEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *GithubEventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(githubevent.FieldID))
}

// WhereEventID applies the entql string predicate on the event_id field.
func (f *GithubEventFilter) WhereEventID(p entql.StringP) {
	f.Where(p.Field(githubevent.FieldEventID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *GithubEventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(githubevent.FieldEventType))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GithubEventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(githubevent.FieldCreatedAt))
}

// WherePublic applies the entql bool predicate on the public field.
func (f *GithubEventFilter) WherePublic(p entql.BoolP) {
	f.Where(p.Field(githubevent.FieldPublic))
}

// WhereActorID applies the entql int64 predicate on the actor_id field.
func (f *GithubEventFilter) WhereActorID(p entql.Int64P) {
	f.Where(p.Field(githubevent.FieldActorID))
}

// WhereActor applies the entql json.RawMessage predicate on the actor field.
func (f *GithubEventFilter) WhereActor(p entql.BytesP) {
	f.Where(p.Field(githubevent.FieldActor))
}

// WhereRepoID applies the entql int64 predicate on the repo_id field.
func (f *GithubEventFilter) WhereRepoID(p entql.Int64P) {
	f.Where(p.Field(githubevent.FieldRepoID))
}

// WhereRepo applies the entql json.RawMessage predicate on the repo field.
func (f *GithubEventFilter) WhereRepo(p entql.BytesP) {
	f.Where(p.Field(githubevent.FieldRepo))
}

// WherePayload applies the entql json.RawMessage predicate on the payload field.
func (f *GithubEventFilter) WherePayload(p entql.BytesP) {
	f.Where(p.Field(githubevent.FieldPayload))
}

// addPredicate implements the predicateAdder interface.
func (grq *GithubRepositoryQuery) addPredicate(pred func(s *sql.Selector)) {
	grq.predicates = append(grq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GithubRepositoryQuery builder.
func (grq *GithubRepositoryQuery) Filter() *GithubRepositoryFilter {
	return &GithubRepositoryFilter{config: grq.config, predicateAdder: grq}
}

// addPredicate implements the predicateAdder interface.
func (m *GithubRepositoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GithubRepositoryMutation builder.
func (m *GithubRepositoryMutation) Filter() *GithubRepositoryFilter {
	return &GithubRepositoryFilter{config: m.config, predicateAdder: m}
}

// GithubRepositoryFilter provides a generic filtering capability at runtime for GithubRepositoryQuery.
type GithubRepositoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GithubRepositoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *GithubRepositoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(githubrepository.FieldID))
}

// WhereRepoID applies the entql int64 predicate on the repo_id field.
func (f *GithubRepositoryFilter) WhereRepoID(p entql.Int64P) {
	f.Where(p.Field(githubrepository.FieldRepoID))
}

// WhereName applies the entql string predicate on the name field.
func (f *GithubRepositoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(githubrepository.FieldName))
}

// WhereFullName applies the entql string predicate on the full_name field.
func (f *GithubRepositoryFilter) WhereFullName(p entql.StringP) {
	f.Where(p.Field(githubrepository.FieldFullName))
}

// WhereOwnerLogin applies the entql string predicate on the owner_login field.
func (f *GithubRepositoryFilter) WhereOwnerLogin(p entql.StringP) {
	f.Where(p.Field(githubrepository.FieldOwnerLogin))
}

// WhereOwner applies the entql json.RawMessage predicate on the owner field.
func (f *GithubRepositoryFilter) WhereOwner(p entql.BytesP) {
	f.Where(p.Field(githubrepository.FieldOwner))
}

// WherePublic applies the entql bool predicate on the public field.
func (f *GithubRepositoryFilter) WherePublic(p entql.BoolP) {
	f.Where(p.Field(githubrepository.FieldPublic))
}

// WhereHTMLURL applies the entql string predicate on the html_url field.
func (f *GithubRepositoryFilter) WhereHTMLURL(p entql.StringP) {
	f.Where(p.Field(githubrepository.FieldHTMLURL))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GithubRepositoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(githubrepository.FieldDescription))
}

// WhereFork applies the entql bool predicate on the fork field.
func (f *GithubRepositoryFilter) WhereFork(p entql.BoolP) {
	f.Where(p.Field(githubrepository.FieldFork))
}

// WhereHomepage applies the entql string predicate on the homepage field.
func (f *GithubRepositoryFilter) WhereHomepage(p entql.StringP) {
	f.Where(p.Field(githubrepository.FieldHomepage))
}

// WhereStarCount applies the entql int predicate on the star_count field.
func (f *GithubRepositoryFilter) WhereStarCount(p entql.IntP) {
	f.Where(p.Field(githubrepository.FieldStarCount))
}

// WhereDefaultBranch applies the entql string predicate on the default_branch field.
func (f *GithubRepositoryFilter) WhereDefaultBranch(p entql.StringP) {
	f.Where(p.Field(githubrepository.FieldDefaultBranch))
}

// WhereIsTemplate applies the entql bool predicate on the is_template field.
func (f *GithubRepositoryFilter) WhereIsTemplate(p entql.BoolP) {
	f.Where(p.Field(githubrepository.FieldIsTemplate))
}

// WhereHasIssues applies the entql bool predicate on the has_issues field.
func (f *GithubRepositoryFilter) WhereHasIssues(p entql.BoolP) {
	f.Where(p.Field(githubrepository.FieldHasIssues))
}

// WhereArchived applies the entql bool predicate on the archived field.
func (f *GithubRepositoryFilter) WhereArchived(p entql.BoolP) {
	f.Where(p.Field(githubrepository.FieldArchived))
}

// WherePushedAt applies the entql time.Time predicate on the pushed_at field.
func (f *GithubRepositoryFilter) WherePushedAt(p entql.TimeP) {
	f.Where(p.Field(githubrepository.FieldPushedAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GithubRepositoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(githubrepository.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GithubRepositoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(githubrepository.FieldUpdatedAt))
}

// WhereLicense applies the entql json.RawMessage predicate on the license field.
func (f *GithubRepositoryFilter) WhereLicense(p entql.BytesP) {
	f.Where(p.Field(githubrepository.FieldLicense))
}

// addPredicate implements the predicateAdder interface.
func (lq *LabelQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LabelQuery builder.
func (lq *LabelQuery) Filter() *LabelFilter {
	return &LabelFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LabelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LabelMutation builder.
func (m *LabelMutation) Filter() *LabelFilter {
	return &LabelFilter{config: m.config, predicateAdder: m}
}

// LabelFilter provides a generic filtering capability at runtime for LabelQuery.
type LabelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LabelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *LabelFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(label.FieldID))
}
