// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"fmt"
	"strings"
	"time"

	"aiisx.com/src/ent/files"
	"entgo.io/ent/dialect/sql"
)

// Files is the model entity for the Files schema.
type Files struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Bucket holds the value of the "bucket" field.
	Bucket string `json:"bucket,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FilesQuery when eager-loading is set.
	Edges FilesEdges `json:"edges"`
}

// FilesEdges holds the relations/edges for other nodes in the graph.
type FilesEdges struct {
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedPosts map[string][]*Post
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e FilesEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Files) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case files.FieldID:
			values[i] = new(sql.NullInt64)
		case files.FieldName, files.FieldURL, files.FieldBucket:
			values[i] = new(sql.NullString)
		case files.FieldCreateTime, files.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Files", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Files fields.
func (f *Files) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case files.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case files.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				f.CreateTime = value.Time
			}
		case files.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				f.UpdateTime = value.Time
			}
		case files.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case files.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				f.URL = value.String
			}
		case files.FieldBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				f.Bucket = value.String
			}
		}
	}
	return nil
}

// QueryPosts queries the "posts" edge of the Files entity.
func (f *Files) QueryPosts() *PostQuery {
	return (&FilesClient{config: f.config}).QueryPosts(f)
}

// Update returns a builder for updating this Files.
// Note that you need to call Files.Unwrap() before calling this method if this Files
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Files) Update() *FilesUpdateOne {
	return (&FilesClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Files entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Files) Unwrap() *Files {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Files is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Files) String() string {
	var builder strings.Builder
	builder.WriteString("Files(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("create_time=")
	builder.WriteString(f.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(f.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(f.URL)
	builder.WriteString(", ")
	builder.WriteString("bucket=")
	builder.WriteString(f.Bucket)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPosts returns the Posts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (f *Files) NamedPosts(name string) ([]*Post, error) {
	if f.Edges.namedPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := f.Edges.namedPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (f *Files) appendNamedPosts(name string, edges ...*Post) {
	if f.Edges.namedPosts == nil {
		f.Edges.namedPosts = make(map[string][]*Post)
	}
	if len(edges) == 0 {
		f.Edges.namedPosts[name] = []*Post{}
	} else {
		f.Edges.namedPosts[name] = append(f.Edges.namedPosts[name], edges...)
	}
}

// FilesSlice is a parsable slice of Files.
type FilesSlice []*Files

func (f FilesSlice) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
