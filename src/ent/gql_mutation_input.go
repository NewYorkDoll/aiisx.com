// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"time"
)

// CreateFilesInput represents a mutation input for creating filesslice.
type CreateFilesInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Name       string
	URL        string
	Bucket     string
	PostIDs    []int
}

// Mutate applies the CreateFilesInput on the FilesMutation builder.
func (i *CreateFilesInput) Mutate(m *FilesMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	m.SetURL(i.URL)
	m.SetBucket(i.Bucket)
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
}

// SetInput applies the change-set in the CreateFilesInput on the FilesCreate builder.
func (c *FilesCreate) SetInput(i CreateFilesInput) *FilesCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFilesInput represents a mutation input for updating filesslice.
type UpdateFilesInput struct {
	UpdateTime    *time.Time
	Name          *string
	URL           *string
	Bucket        *string
	AddPostIDs    []int
	RemovePostIDs []int
}

// Mutate applies the UpdateFilesInput on the FilesMutation builder.
func (i *UpdateFilesInput) Mutate(m *FilesMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if v := i.Bucket; v != nil {
		m.SetBucket(*v)
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateFilesInput on the FilesUpdate builder.
func (c *FilesUpdate) SetInput(i UpdateFilesInput) *FilesUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFilesInput on the FilesUpdateOne builder.
func (c *FilesUpdateOne) SetInput(i UpdateFilesInput) *FilesUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLabelInput represents a mutation input for creating labels.
type CreateLabelInput struct {
	CreateTime          *time.Time
	UpdateTime          *time.Time
	Name                string
	PostIDs             []int
	GithubRepositoryIDs []int
}

// Mutate applies the CreateLabelInput on the LabelMutation builder.
func (i *CreateLabelInput) Mutate(m *LabelMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.GithubRepositoryIDs; len(v) > 0 {
		m.AddGithubRepositoryIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLabelInput on the LabelCreate builder.
func (c *LabelCreate) SetInput(i CreateLabelInput) *LabelCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLabelInput represents a mutation input for updating labels.
type UpdateLabelInput struct {
	UpdateTime                *time.Time
	Name                      *string
	AddPostIDs                []int
	RemovePostIDs             []int
	AddGithubRepositoryIDs    []int
	RemoveGithubRepositoryIDs []int
}

// Mutate applies the UpdateLabelInput on the LabelMutation builder.
func (i *UpdateLabelInput) Mutate(m *LabelMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
	if v := i.AddGithubRepositoryIDs; len(v) > 0 {
		m.AddGithubRepositoryIDs(v...)
	}
	if v := i.RemoveGithubRepositoryIDs; len(v) > 0 {
		m.RemoveGithubRepositoryIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLabelInput on the LabelUpdate builder.
func (c *LabelUpdate) SetInput(i UpdateLabelInput) *LabelUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLabelInput on the LabelUpdateOne builder.
func (c *LabelUpdateOne) SetInput(i UpdateLabelInput) *LabelUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostInput represents a mutation input for creating posts.
type CreatePostInput struct {
	CreateTime  *time.Time
	UpdateTime  *time.Time
	Slug        string
	Title       string
	Content     string
	PublishedAt *time.Time
	Public      *bool
	LabelIDs    []int
	FileIDs     []int
}

// Mutate applies the CreatePostInput on the PostMutation builder.
func (i *CreatePostInput) Mutate(m *PostMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetSlug(i.Slug)
	m.SetTitle(i.Title)
	m.SetContent(i.Content)
	if v := i.PublishedAt; v != nil {
		m.SetPublishedAt(*v)
	}
	if v := i.Public; v != nil {
		m.SetPublic(*v)
	}
	if v := i.LabelIDs; len(v) > 0 {
		m.AddLabelIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePostInput on the PostCreate builder.
func (c *PostCreate) SetInput(i CreatePostInput) *PostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostInput represents a mutation input for updating posts.
type UpdatePostInput struct {
	UpdateTime     *time.Time
	Slug           *string
	Title          *string
	Content        *string
	PublishedAt    *time.Time
	Public         *bool
	AddLabelIDs    []int
	RemoveLabelIDs []int
	AddFileIDs     []int
	RemoveFileIDs  []int
}

// Mutate applies the UpdatePostInput on the PostMutation builder.
func (i *UpdatePostInput) Mutate(m *PostMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.PublishedAt; v != nil {
		m.SetPublishedAt(*v)
	}
	if v := i.Public; v != nil {
		m.SetPublic(*v)
	}
	if v := i.AddLabelIDs; len(v) > 0 {
		m.AddLabelIDs(v...)
	}
	if v := i.RemoveLabelIDs; len(v) > 0 {
		m.RemoveLabelIDs(v...)
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdate builder.
func (c *PostUpdate) SetInput(i UpdatePostInput) *PostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdateOne builder.
func (c *PostUpdateOne) SetInput(i UpdatePostInput) *PostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
