// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"aiisx.com/src/ent/githubevent"
	"aiisx.com/src/ent/githubrepository"
	"aiisx.com/src/ent/label"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// GithubEventEdge is the edge representation of GithubEvent.
type GithubEventEdge struct {
	Node   *GithubEvent `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// GithubEventConnection is the connection containing edges to GithubEvent.
type GithubEventConnection struct {
	Edges      []*GithubEventEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *GithubEventConnection) build(nodes []*GithubEvent, pager *githubeventPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *GithubEvent
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GithubEvent {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GithubEvent {
			return nodes[i]
		}
	}
	c.Edges = make([]*GithubEventEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GithubEventEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GithubEventPaginateOption enables pagination customization.
type GithubEventPaginateOption func(*githubeventPager) error

// WithGithubEventOrder configures pagination ordering.
func WithGithubEventOrder(order *GithubEventOrder) GithubEventPaginateOption {
	if order == nil {
		order = DefaultGithubEventOrder
	}
	o := *order
	return func(pager *githubeventPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGithubEventOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGithubEventFilter configures pagination filter.
func WithGithubEventFilter(filter func(*GithubEventQuery) (*GithubEventQuery, error)) GithubEventPaginateOption {
	return func(pager *githubeventPager) error {
		if filter == nil {
			return errors.New("GithubEventQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type githubeventPager struct {
	order  *GithubEventOrder
	filter func(*GithubEventQuery) (*GithubEventQuery, error)
}

func newGithubEventPager(opts []GithubEventPaginateOption) (*githubeventPager, error) {
	pager := &githubeventPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGithubEventOrder
	}
	return pager, nil
}

func (p *githubeventPager) applyFilter(query *GithubEventQuery) (*GithubEventQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *githubeventPager) toCursor(ge *GithubEvent) Cursor {
	return p.order.Field.toCursor(ge)
}

func (p *githubeventPager) applyCursors(query *GithubEventQuery, after, before *Cursor) *GithubEventQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGithubEventOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *githubeventPager) applyOrder(query *GithubEventQuery, reverse bool) *GithubEventQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGithubEventOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGithubEventOrder.Field.field))
	}
	return query
}

func (p *githubeventPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGithubEventOrder.Field {
			b.Comma().Ident(DefaultGithubEventOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to GithubEvent.
func (ge *GithubEventQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GithubEventPaginateOption,
) (*GithubEventConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGithubEventPager(opts)
	if err != nil {
		return nil, err
	}
	if ge, err = pager.applyFilter(ge); err != nil {
		return nil, err
	}
	conn := &GithubEventConnection{Edges: []*GithubEventEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ge.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ge = pager.applyCursors(ge, after, before)
	ge = pager.applyOrder(ge, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ge.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ge.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ge.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// GithubEventOrderFieldEventID orders GithubEvent by event_id.
	GithubEventOrderFieldEventID = &GithubEventOrderField{
		field: githubevent.FieldEventID,
		toCursor: func(ge *GithubEvent) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.EventID,
			}
		},
	}
	// GithubEventOrderFieldEventType orders GithubEvent by event_type.
	GithubEventOrderFieldEventType = &GithubEventOrderField{
		field: githubevent.FieldEventType,
		toCursor: func(ge *GithubEvent) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.EventType,
			}
		},
	}
	// GithubEventOrderFieldCreatedAt orders GithubEvent by created_at.
	GithubEventOrderFieldCreatedAt = &GithubEventOrderField{
		field: githubevent.FieldCreatedAt,
		toCursor: func(ge *GithubEvent) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.CreatedAt,
			}
		},
	}
	// GithubEventOrderFieldActorID orders GithubEvent by actor_id.
	GithubEventOrderFieldActorID = &GithubEventOrderField{
		field: githubevent.FieldActorID,
		toCursor: func(ge *GithubEvent) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.ActorID,
			}
		},
	}
	// GithubEventOrderFieldRepoID orders GithubEvent by repo_id.
	GithubEventOrderFieldRepoID = &GithubEventOrderField{
		field: githubevent.FieldRepoID,
		toCursor: func(ge *GithubEvent) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.RepoID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GithubEventOrderField) String() string {
	var str string
	switch f.field {
	case githubevent.FieldEventID:
		str = "EVENT_ID"
	case githubevent.FieldEventType:
		str = "EVENT_TYPE"
	case githubevent.FieldCreatedAt:
		str = "CREATED_AT"
	case githubevent.FieldActorID:
		str = "ACTOR_ID"
	case githubevent.FieldRepoID:
		str = "REPO_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GithubEventOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GithubEventOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GithubEventOrderField %T must be a string", v)
	}
	switch str {
	case "EVENT_ID":
		*f = *GithubEventOrderFieldEventID
	case "EVENT_TYPE":
		*f = *GithubEventOrderFieldEventType
	case "CREATED_AT":
		*f = *GithubEventOrderFieldCreatedAt
	case "ACTOR_ID":
		*f = *GithubEventOrderFieldActorID
	case "REPO_ID":
		*f = *GithubEventOrderFieldRepoID
	default:
		return fmt.Errorf("%s is not a valid GithubEventOrderField", str)
	}
	return nil
}

// GithubEventOrderField defines the ordering field of GithubEvent.
type GithubEventOrderField struct {
	field    string
	toCursor func(*GithubEvent) Cursor
}

// GithubEventOrder defines the ordering of GithubEvent.
type GithubEventOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *GithubEventOrderField `json:"field"`
}

// DefaultGithubEventOrder is the default ordering of GithubEvent.
var DefaultGithubEventOrder = &GithubEventOrder{
	Direction: OrderDirectionAsc,
	Field: &GithubEventOrderField{
		field: githubevent.FieldID,
		toCursor: func(ge *GithubEvent) Cursor {
			return Cursor{ID: ge.ID}
		},
	},
}

// ToEdge converts GithubEvent into GithubEventEdge.
func (ge *GithubEvent) ToEdge(order *GithubEventOrder) *GithubEventEdge {
	if order == nil {
		order = DefaultGithubEventOrder
	}
	return &GithubEventEdge{
		Node:   ge,
		Cursor: order.Field.toCursor(ge),
	}
}

// GithubRepositoryEdge is the edge representation of GithubRepository.
type GithubRepositoryEdge struct {
	Node   *GithubRepository `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// GithubRepositoryConnection is the connection containing edges to GithubRepository.
type GithubRepositoryConnection struct {
	Edges      []*GithubRepositoryEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *GithubRepositoryConnection) build(nodes []*GithubRepository, pager *githubrepositoryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *GithubRepository
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GithubRepository {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GithubRepository {
			return nodes[i]
		}
	}
	c.Edges = make([]*GithubRepositoryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GithubRepositoryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GithubRepositoryPaginateOption enables pagination customization.
type GithubRepositoryPaginateOption func(*githubrepositoryPager) error

// WithGithubRepositoryOrder configures pagination ordering.
func WithGithubRepositoryOrder(order *GithubRepositoryOrder) GithubRepositoryPaginateOption {
	if order == nil {
		order = DefaultGithubRepositoryOrder
	}
	o := *order
	return func(pager *githubrepositoryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGithubRepositoryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGithubRepositoryFilter configures pagination filter.
func WithGithubRepositoryFilter(filter func(*GithubRepositoryQuery) (*GithubRepositoryQuery, error)) GithubRepositoryPaginateOption {
	return func(pager *githubrepositoryPager) error {
		if filter == nil {
			return errors.New("GithubRepositoryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type githubrepositoryPager struct {
	order  *GithubRepositoryOrder
	filter func(*GithubRepositoryQuery) (*GithubRepositoryQuery, error)
}

func newGithubRepositoryPager(opts []GithubRepositoryPaginateOption) (*githubrepositoryPager, error) {
	pager := &githubrepositoryPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGithubRepositoryOrder
	}
	return pager, nil
}

func (p *githubrepositoryPager) applyFilter(query *GithubRepositoryQuery) (*GithubRepositoryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *githubrepositoryPager) toCursor(gr *GithubRepository) Cursor {
	return p.order.Field.toCursor(gr)
}

func (p *githubrepositoryPager) applyCursors(query *GithubRepositoryQuery, after, before *Cursor) *GithubRepositoryQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGithubRepositoryOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *githubrepositoryPager) applyOrder(query *GithubRepositoryQuery, reverse bool) *GithubRepositoryQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGithubRepositoryOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGithubRepositoryOrder.Field.field))
	}
	return query
}

func (p *githubrepositoryPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGithubRepositoryOrder.Field {
			b.Comma().Ident(DefaultGithubRepositoryOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to GithubRepository.
func (gr *GithubRepositoryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GithubRepositoryPaginateOption,
) (*GithubRepositoryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGithubRepositoryPager(opts)
	if err != nil {
		return nil, err
	}
	if gr, err = pager.applyFilter(gr); err != nil {
		return nil, err
	}
	conn := &GithubRepositoryConnection{Edges: []*GithubRepositoryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = gr.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	gr = pager.applyCursors(gr, after, before)
	gr = pager.applyOrder(gr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		gr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := gr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := gr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// GithubRepositoryOrderFieldName orders GithubRepository by name.
	GithubRepositoryOrderFieldName = &GithubRepositoryOrderField{
		field: githubrepository.FieldName,
		toCursor: func(gr *GithubRepository) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.Name,
			}
		},
	}
	// GithubRepositoryOrderFieldFullName orders GithubRepository by full_name.
	GithubRepositoryOrderFieldFullName = &GithubRepositoryOrderField{
		field: githubrepository.FieldFullName,
		toCursor: func(gr *GithubRepository) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.FullName,
			}
		},
	}
	// GithubRepositoryOrderFieldOwnerLogin orders GithubRepository by owner_login.
	GithubRepositoryOrderFieldOwnerLogin = &GithubRepositoryOrderField{
		field: githubrepository.FieldOwnerLogin,
		toCursor: func(gr *GithubRepository) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.OwnerLogin,
			}
		},
	}
	// GithubRepositoryOrderFieldStarCount orders GithubRepository by star_count.
	GithubRepositoryOrderFieldStarCount = &GithubRepositoryOrderField{
		field: githubrepository.FieldStarCount,
		toCursor: func(gr *GithubRepository) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.StarCount,
			}
		},
	}
	// GithubRepositoryOrderFieldPushedAt orders GithubRepository by pushed_at.
	GithubRepositoryOrderFieldPushedAt = &GithubRepositoryOrderField{
		field: githubrepository.FieldPushedAt,
		toCursor: func(gr *GithubRepository) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.PushedAt,
			}
		},
	}
	// GithubRepositoryOrderFieldCreatedAt orders GithubRepository by created_at.
	GithubRepositoryOrderFieldCreatedAt = &GithubRepositoryOrderField{
		field: githubrepository.FieldCreatedAt,
		toCursor: func(gr *GithubRepository) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.CreatedAt,
			}
		},
	}
	// GithubRepositoryOrderFieldUpdatedAt orders GithubRepository by updated_at.
	GithubRepositoryOrderFieldUpdatedAt = &GithubRepositoryOrderField{
		field: githubrepository.FieldUpdatedAt,
		toCursor: func(gr *GithubRepository) Cursor {
			return Cursor{
				ID:    gr.ID,
				Value: gr.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GithubRepositoryOrderField) String() string {
	var str string
	switch f.field {
	case githubrepository.FieldName:
		str = "NAME"
	case githubrepository.FieldFullName:
		str = "FULL_NAME"
	case githubrepository.FieldOwnerLogin:
		str = "OWNER_LOGIN"
	case githubrepository.FieldStarCount:
		str = "STAR_COUNT"
	case githubrepository.FieldPushedAt:
		str = "PUSHED_AT"
	case githubrepository.FieldCreatedAt:
		str = "CREATED_AT"
	case githubrepository.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GithubRepositoryOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GithubRepositoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GithubRepositoryOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *GithubRepositoryOrderFieldName
	case "FULL_NAME":
		*f = *GithubRepositoryOrderFieldFullName
	case "OWNER_LOGIN":
		*f = *GithubRepositoryOrderFieldOwnerLogin
	case "STAR_COUNT":
		*f = *GithubRepositoryOrderFieldStarCount
	case "PUSHED_AT":
		*f = *GithubRepositoryOrderFieldPushedAt
	case "CREATED_AT":
		*f = *GithubRepositoryOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *GithubRepositoryOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid GithubRepositoryOrderField", str)
	}
	return nil
}

// GithubRepositoryOrderField defines the ordering field of GithubRepository.
type GithubRepositoryOrderField struct {
	field    string
	toCursor func(*GithubRepository) Cursor
}

// GithubRepositoryOrder defines the ordering of GithubRepository.
type GithubRepositoryOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *GithubRepositoryOrderField `json:"field"`
}

// DefaultGithubRepositoryOrder is the default ordering of GithubRepository.
var DefaultGithubRepositoryOrder = &GithubRepositoryOrder{
	Direction: OrderDirectionAsc,
	Field: &GithubRepositoryOrderField{
		field: githubrepository.FieldID,
		toCursor: func(gr *GithubRepository) Cursor {
			return Cursor{ID: gr.ID}
		},
	},
}

// ToEdge converts GithubRepository into GithubRepositoryEdge.
func (gr *GithubRepository) ToEdge(order *GithubRepositoryOrder) *GithubRepositoryEdge {
	if order == nil {
		order = DefaultGithubRepositoryOrder
	}
	return &GithubRepositoryEdge{
		Node:   gr,
		Cursor: order.Field.toCursor(gr),
	}
}

// LabelEdge is the edge representation of Label.
type LabelEdge struct {
	Node   *Label `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// LabelConnection is the connection containing edges to Label.
type LabelConnection struct {
	Edges      []*LabelEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *LabelConnection) build(nodes []*Label, pager *labelPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Label
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Label {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Label {
			return nodes[i]
		}
	}
	c.Edges = make([]*LabelEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LabelEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LabelPaginateOption enables pagination customization.
type LabelPaginateOption func(*labelPager) error

// WithLabelOrder configures pagination ordering.
func WithLabelOrder(order *LabelOrder) LabelPaginateOption {
	if order == nil {
		order = DefaultLabelOrder
	}
	o := *order
	return func(pager *labelPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLabelOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLabelFilter configures pagination filter.
func WithLabelFilter(filter func(*LabelQuery) (*LabelQuery, error)) LabelPaginateOption {
	return func(pager *labelPager) error {
		if filter == nil {
			return errors.New("LabelQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type labelPager struct {
	order  *LabelOrder
	filter func(*LabelQuery) (*LabelQuery, error)
}

func newLabelPager(opts []LabelPaginateOption) (*labelPager, error) {
	pager := &labelPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLabelOrder
	}
	return pager, nil
}

func (p *labelPager) applyFilter(query *LabelQuery) (*LabelQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *labelPager) toCursor(l *Label) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *labelPager) applyCursors(query *LabelQuery, after, before *Cursor) *LabelQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultLabelOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *labelPager) applyOrder(query *LabelQuery, reverse bool) *LabelQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultLabelOrder.Field {
		query = query.Order(direction.orderFunc(DefaultLabelOrder.Field.field))
	}
	return query
}

func (p *labelPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLabelOrder.Field {
			b.Comma().Ident(DefaultLabelOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Label.
func (l *LabelQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LabelPaginateOption,
) (*LabelConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLabelPager(opts)
	if err != nil {
		return nil, err
	}
	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}
	conn := &LabelConnection{Edges: []*LabelEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = l.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	l = pager.applyCursors(l, after, before)
	l = pager.applyOrder(l, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		l.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := l.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := l.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LabelOrderField defines the ordering field of Label.
type LabelOrderField struct {
	field    string
	toCursor func(*Label) Cursor
}

// LabelOrder defines the ordering of Label.
type LabelOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *LabelOrderField `json:"field"`
}

// DefaultLabelOrder is the default ordering of Label.
var DefaultLabelOrder = &LabelOrder{
	Direction: OrderDirectionAsc,
	Field: &LabelOrderField{
		field: label.FieldID,
		toCursor: func(l *Label) Cursor {
			return Cursor{ID: l.ID}
		},
	},
}

// ToEdge converts Label into LabelEdge.
func (l *Label) ToEdge(order *LabelOrder) *LabelEdge {
	if order == nil {
		order = DefaultLabelOrder
	}
	return &LabelEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}
