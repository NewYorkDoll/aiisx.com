// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (l *Label) Posts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *PostOrder, where *PostWhereInput,
) (*PostConnection, error) {
	opts := []PostPaginateOption{
		WithPostOrder(orderBy),
		WithPostFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := l.Edges.totalCount[0][alias]
	if nodes, err := l.NamedPosts(alias); err == nil || hasTotalCount {
		pager, err := newPostPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &PostConnection{Edges: []*PostEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return l.QueryPosts().Paginate(ctx, after, first, before, last, opts...)
}

func (po *Post) Author(ctx context.Context) (*User, error) {
	result, err := po.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryAuthor().Only(ctx)
	}
	return result, err
}

func (po *Post) Labels(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *LabelWhereInput,
) (*LabelConnection, error) {
	opts := []LabelPaginateOption{
		WithLabelFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := po.Edges.totalCount[1][alias]
	if nodes, err := po.NamedLabels(alias); err == nil || hasTotalCount {
		pager, err := newLabelPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &LabelConnection{Edges: []*LabelEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return po.QueryLabels().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Posts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *PostOrder, where *PostWhereInput,
) (*PostConnection, error) {
	opts := []PostPaginateOption{
		WithPostOrder(orderBy),
		WithPostFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedPosts(alias); err == nil || hasTotalCount {
		pager, err := newPostPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &PostConnection{Edges: []*PostEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryPosts().Paginate(ctx, after, first, before, last, opts...)
}
