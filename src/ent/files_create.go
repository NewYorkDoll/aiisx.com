// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"aiisx.com/src/ent/files"
	"aiisx.com/src/ent/post"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilesCreate is the builder for creating a Files entity.
type FilesCreate struct {
	config
	mutation *FilesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (fc *FilesCreate) SetCreateTime(t time.Time) *FilesCreate {
	fc.mutation.SetCreateTime(t)
	return fc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (fc *FilesCreate) SetNillableCreateTime(t *time.Time) *FilesCreate {
	if t != nil {
		fc.SetCreateTime(*t)
	}
	return fc
}

// SetUpdateTime sets the "update_time" field.
func (fc *FilesCreate) SetUpdateTime(t time.Time) *FilesCreate {
	fc.mutation.SetUpdateTime(t)
	return fc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (fc *FilesCreate) SetNillableUpdateTime(t *time.Time) *FilesCreate {
	if t != nil {
		fc.SetUpdateTime(*t)
	}
	return fc
}

// SetName sets the "name" field.
func (fc *FilesCreate) SetName(s string) *FilesCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetURL sets the "url" field.
func (fc *FilesCreate) SetURL(s string) *FilesCreate {
	fc.mutation.SetURL(s)
	return fc
}

// SetBucket sets the "bucket" field.
func (fc *FilesCreate) SetBucket(s string) *FilesCreate {
	fc.mutation.SetBucket(s)
	return fc
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (fc *FilesCreate) AddPostIDs(ids ...int) *FilesCreate {
	fc.mutation.AddPostIDs(ids...)
	return fc
}

// AddPosts adds the "posts" edges to the Post entity.
func (fc *FilesCreate) AddPosts(p ...*Post) *FilesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fc.AddPostIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fc *FilesCreate) Mutation() *FilesMutation {
	return fc.mutation
}

// Save creates the Files in the database.
func (fc *FilesCreate) Save(ctx context.Context) (*Files, error) {
	var (
		err  error
		node *Files
	)
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Files)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FilesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FilesCreate) SaveX(ctx context.Context) *Files {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FilesCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FilesCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FilesCreate) defaults() error {
	if _, ok := fc.mutation.CreateTime(); !ok {
		if files.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized files.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := files.DefaultCreateTime()
		fc.mutation.SetCreateTime(v)
	}
	if _, ok := fc.mutation.UpdateTime(); !ok {
		if files.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized files.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := files.DefaultUpdateTime()
		fc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FilesCreate) check() error {
	if _, ok := fc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Files.create_time"`)}
	}
	if _, ok := fc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Files.update_time"`)}
	}
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Files.name"`)}
	}
	if _, ok := fc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Files.url"`)}
	}
	if _, ok := fc.mutation.Bucket(); !ok {
		return &ValidationError{Name: "bucket", err: errors.New(`ent: missing required field "Files.bucket"`)}
	}
	return nil
}

func (fc *FilesCreate) sqlSave(ctx context.Context) (*Files, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fc *FilesCreate) createSpec() (*Files, *sqlgraph.CreateSpec) {
	var (
		_node = &Files{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: files.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: files.FieldID,
			},
		}
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: files.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := fc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: files.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := fc.mutation.Bucket(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldBucket,
		})
		_node.Bucket = value
	}
	if nodes := fc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.PostsTable,
			Columns: files.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Files.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilesUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (fc *FilesCreate) OnConflict(opts ...sql.ConflictOption) *FilesUpsertOne {
	fc.conflict = opts
	return &FilesUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FilesCreate) OnConflictColumns(columns ...string) *FilesUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FilesUpsertOne{
		create: fc,
	}
}

type (
	// FilesUpsertOne is the builder for "upsert"-ing
	//  one Files node.
	FilesUpsertOne struct {
		create *FilesCreate
	}

	// FilesUpsert is the "OnConflict" setter.
	FilesUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *FilesUpsert) SetUpdateTime(v time.Time) *FilesUpsert {
	u.Set(files.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *FilesUpsert) UpdateUpdateTime() *FilesUpsert {
	u.SetExcluded(files.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *FilesUpsert) SetName(v string) *FilesUpsert {
	u.Set(files.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilesUpsert) UpdateName() *FilesUpsert {
	u.SetExcluded(files.FieldName)
	return u
}

// SetURL sets the "url" field.
func (u *FilesUpsert) SetURL(v string) *FilesUpsert {
	u.Set(files.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *FilesUpsert) UpdateURL() *FilesUpsert {
	u.SetExcluded(files.FieldURL)
	return u
}

// SetBucket sets the "bucket" field.
func (u *FilesUpsert) SetBucket(v string) *FilesUpsert {
	u.Set(files.FieldBucket, v)
	return u
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *FilesUpsert) UpdateBucket() *FilesUpsert {
	u.SetExcluded(files.FieldBucket)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FilesUpsertOne) UpdateNewValues() *FilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(files.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Files.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FilesUpsertOne) Ignore() *FilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilesUpsertOne) DoNothing() *FilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilesCreate.OnConflict
// documentation for more info.
func (u *FilesUpsertOne) Update(set func(*FilesUpsert)) *FilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *FilesUpsertOne) SetUpdateTime(v time.Time) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateUpdateTime() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *FilesUpsertOne) SetName(v string) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateName() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *FilesUpsertOne) SetURL(v string) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateURL() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateURL()
	})
}

// SetBucket sets the "bucket" field.
func (u *FilesUpsertOne) SetBucket(v string) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetBucket(v)
	})
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateBucket() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateBucket()
	})
}

// Exec executes the query.
func (u *FilesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FilesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FilesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FilesCreateBulk is the builder for creating many Files entities in bulk.
type FilesCreateBulk struct {
	config
	builders []*FilesCreate
	conflict []sql.ConflictOption
}

// Save creates the Files entities in the database.
func (fcb *FilesCreateBulk) Save(ctx context.Context) ([]*Files, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Files, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FilesCreateBulk) SaveX(ctx context.Context) []*Files {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FilesCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FilesCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Files.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilesUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (fcb *FilesCreateBulk) OnConflict(opts ...sql.ConflictOption) *FilesUpsertBulk {
	fcb.conflict = opts
	return &FilesUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FilesCreateBulk) OnConflictColumns(columns ...string) *FilesUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FilesUpsertBulk{
		create: fcb,
	}
}

// FilesUpsertBulk is the builder for "upsert"-ing
// a bulk of Files nodes.
type FilesUpsertBulk struct {
	create *FilesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FilesUpsertBulk) UpdateNewValues() *FilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(files.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FilesUpsertBulk) Ignore() *FilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilesUpsertBulk) DoNothing() *FilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilesCreateBulk.OnConflict
// documentation for more info.
func (u *FilesUpsertBulk) Update(set func(*FilesUpsert)) *FilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *FilesUpsertBulk) SetUpdateTime(v time.Time) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateUpdateTime() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *FilesUpsertBulk) SetName(v string) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateName() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *FilesUpsertBulk) SetURL(v string) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateURL() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateURL()
	})
}

// SetBucket sets the "bucket" field.
func (u *FilesUpsertBulk) SetBucket(v string) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetBucket(v)
	})
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateBucket() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateBucket()
	})
}

// Exec executes the query.
func (u *FilesUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FilesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
