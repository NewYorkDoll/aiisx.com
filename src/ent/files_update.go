// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"aiisx.com/src/ent/files"
	"aiisx.com/src/ent/post"
	"aiisx.com/src/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilesUpdate is the builder for updating Files entities.
type FilesUpdate struct {
	config
	hooks    []Hook
	mutation *FilesMutation
}

// Where appends a list predicates to the FilesUpdate builder.
func (fu *FilesUpdate) Where(ps ...predicate.Files) *FilesUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdateTime sets the "update_time" field.
func (fu *FilesUpdate) SetUpdateTime(t time.Time) *FilesUpdate {
	fu.mutation.SetUpdateTime(t)
	return fu
}

// SetName sets the "name" field.
func (fu *FilesUpdate) SetName(s string) *FilesUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetURL sets the "url" field.
func (fu *FilesUpdate) SetURL(s string) *FilesUpdate {
	fu.mutation.SetURL(s)
	return fu
}

// SetBucket sets the "bucket" field.
func (fu *FilesUpdate) SetBucket(s string) *FilesUpdate {
	fu.mutation.SetBucket(s)
	return fu
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (fu *FilesUpdate) AddPostIDs(ids ...int) *FilesUpdate {
	fu.mutation.AddPostIDs(ids...)
	return fu
}

// AddPosts adds the "posts" edges to the Post entity.
func (fu *FilesUpdate) AddPosts(p ...*Post) *FilesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddPostIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fu *FilesUpdate) Mutation() *FilesMutation {
	return fu.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (fu *FilesUpdate) ClearPosts() *FilesUpdate {
	fu.mutation.ClearPosts()
	return fu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (fu *FilesUpdate) RemovePostIDs(ids ...int) *FilesUpdate {
	fu.mutation.RemovePostIDs(ids...)
	return fu
}

// RemovePosts removes "posts" edges to Post entities.
func (fu *FilesUpdate) RemovePosts(p ...*Post) *FilesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FilesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FilesUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FilesUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FilesUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FilesUpdate) defaults() error {
	if _, ok := fu.mutation.UpdateTime(); !ok {
		if files.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized files.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := files.UpdateDefaultUpdateTime()
		fu.mutation.SetUpdateTime(v)
	}
	return nil
}

func (fu *FilesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   files.Table,
			Columns: files.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: files.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: files.FieldUpdateTime,
		})
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldName,
		})
	}
	if value, ok := fu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldURL,
		})
	}
	if value, ok := fu.mutation.Bucket(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldBucket,
		})
	}
	if fu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.PostsTable,
			Columns: files.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !fu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.PostsTable,
			Columns: files.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.PostsTable,
			Columns: files.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{files.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FilesUpdateOne is the builder for updating a single Files entity.
type FilesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilesMutation
}

// SetUpdateTime sets the "update_time" field.
func (fuo *FilesUpdateOne) SetUpdateTime(t time.Time) *FilesUpdateOne {
	fuo.mutation.SetUpdateTime(t)
	return fuo
}

// SetName sets the "name" field.
func (fuo *FilesUpdateOne) SetName(s string) *FilesUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetURL sets the "url" field.
func (fuo *FilesUpdateOne) SetURL(s string) *FilesUpdateOne {
	fuo.mutation.SetURL(s)
	return fuo
}

// SetBucket sets the "bucket" field.
func (fuo *FilesUpdateOne) SetBucket(s string) *FilesUpdateOne {
	fuo.mutation.SetBucket(s)
	return fuo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (fuo *FilesUpdateOne) AddPostIDs(ids ...int) *FilesUpdateOne {
	fuo.mutation.AddPostIDs(ids...)
	return fuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (fuo *FilesUpdateOne) AddPosts(p ...*Post) *FilesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddPostIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fuo *FilesUpdateOne) Mutation() *FilesMutation {
	return fuo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (fuo *FilesUpdateOne) ClearPosts() *FilesUpdateOne {
	fuo.mutation.ClearPosts()
	return fuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (fuo *FilesUpdateOne) RemovePostIDs(ids ...int) *FilesUpdateOne {
	fuo.mutation.RemovePostIDs(ids...)
	return fuo
}

// RemovePosts removes "posts" edges to Post entities.
func (fuo *FilesUpdateOne) RemovePosts(p ...*Post) *FilesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemovePostIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FilesUpdateOne) Select(field string, fields ...string) *FilesUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Files entity.
func (fuo *FilesUpdateOne) Save(ctx context.Context) (*Files, error) {
	var (
		err  error
		node *Files
	)
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Files)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FilesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FilesUpdateOne) SaveX(ctx context.Context) *Files {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FilesUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FilesUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FilesUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdateTime(); !ok {
		if files.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized files.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := files.UpdateDefaultUpdateTime()
		fuo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (fuo *FilesUpdateOne) sqlSave(ctx context.Context) (_node *Files, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   files.Table,
			Columns: files.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: files.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Files.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, files.FieldID)
		for _, f := range fields {
			if !files.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != files.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: files.FieldUpdateTime,
		})
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldName,
		})
	}
	if value, ok := fuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldURL,
		})
	}
	if value, ok := fuo.mutation.Bucket(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: files.FieldBucket,
		})
	}
	if fuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.PostsTable,
			Columns: files.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !fuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.PostsTable,
			Columns: files.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.PostsTable,
			Columns: files.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Files{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{files.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
