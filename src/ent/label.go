// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"fmt"
	"strings"

	"aiisx.com/src/ent/label"
	"entgo.io/ent/dialect/sql"
)

// Label is the model entity for the Label schema.
type Label struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LabelQuery when eager-loading is set.
	Edges LabelEdges `json:"edges"`
}

// LabelEdges holds the relations/edges for other nodes in the graph.
type LabelEdges struct {
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedPosts map[string][]*Post
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e LabelEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Label) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case label.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Label", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Label fields.
func (l *Label) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case label.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		}
	}
	return nil
}

// QueryPosts queries the "posts" edge of the Label entity.
func (l *Label) QueryPosts() *PostQuery {
	return (&LabelClient{config: l.config}).QueryPosts(l)
}

// Update returns a builder for updating this Label.
// Note that you need to call Label.Unwrap() before calling this method if this Label
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Label) Update() *LabelUpdateOne {
	return (&LabelClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Label entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Label) Unwrap() *Label {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Label is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Label) String() string {
	var builder strings.Builder
	builder.WriteString("Label(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPosts returns the Posts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Label) NamedPosts(name string) ([]*Post, error) {
	if l.Edges.namedPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Label) appendNamedPosts(name string, edges ...*Post) {
	if l.Edges.namedPosts == nil {
		l.Edges.namedPosts = make(map[string][]*Post)
	}
	if len(edges) == 0 {
		l.Edges.namedPosts[name] = []*Post{}
	} else {
		l.Edges.namedPosts[name] = append(l.Edges.namedPosts[name], edges...)
	}
}

// Labels is a parsable slice of Label.
type Labels []*Label

func (l Labels) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
