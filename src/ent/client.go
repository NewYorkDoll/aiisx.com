// DO NOT EDIT, CODE GENERATED BY entc. yiziluoying

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"aiisx.com/src/ent/migrate"

	"aiisx.com/src/ent/githubevent"
	"aiisx.com/src/ent/githubrepository"
	"aiisx.com/src/ent/label"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GithubEvent is the client for interacting with the GithubEvent builders.
	GithubEvent *GithubEventClient
	// GithubRepository is the client for interacting with the GithubRepository builders.
	GithubRepository *GithubRepositoryClient
	// Label is the client for interacting with the Label builders.
	Label *LabelClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GithubEvent = NewGithubEventClient(c.config)
	c.GithubRepository = NewGithubRepositoryClient(c.config)
	c.Label = NewLabelClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		GithubEvent:      NewGithubEventClient(cfg),
		GithubRepository: NewGithubRepositoryClient(cfg),
		Label:            NewLabelClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		GithubEvent:      NewGithubEventClient(cfg),
		GithubRepository: NewGithubRepositoryClient(cfg),
		Label:            NewLabelClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GithubEvent.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.GithubEvent.Use(hooks...)
	c.GithubRepository.Use(hooks...)
	c.Label.Use(hooks...)
}

// GithubEventClient is a client for the GithubEvent schema.
type GithubEventClient struct {
	config
}

// NewGithubEventClient returns a client for the GithubEvent from the given config.
func NewGithubEventClient(c config) *GithubEventClient {
	return &GithubEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `githubevent.Hooks(f(g(h())))`.
func (c *GithubEventClient) Use(hooks ...Hook) {
	c.hooks.GithubEvent = append(c.hooks.GithubEvent, hooks...)
}

// Create returns a builder for creating a GithubEvent entity.
func (c *GithubEventClient) Create() *GithubEventCreate {
	mutation := newGithubEventMutation(c.config, OpCreate)
	return &GithubEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GithubEvent entities.
func (c *GithubEventClient) CreateBulk(builders ...*GithubEventCreate) *GithubEventCreateBulk {
	return &GithubEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GithubEvent.
func (c *GithubEventClient) Update() *GithubEventUpdate {
	mutation := newGithubEventMutation(c.config, OpUpdate)
	return &GithubEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GithubEventClient) UpdateOne(ge *GithubEvent) *GithubEventUpdateOne {
	mutation := newGithubEventMutation(c.config, OpUpdateOne, withGithubEvent(ge))
	return &GithubEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GithubEventClient) UpdateOneID(id int) *GithubEventUpdateOne {
	mutation := newGithubEventMutation(c.config, OpUpdateOne, withGithubEventID(id))
	return &GithubEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GithubEvent.
func (c *GithubEventClient) Delete() *GithubEventDelete {
	mutation := newGithubEventMutation(c.config, OpDelete)
	return &GithubEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GithubEventClient) DeleteOne(ge *GithubEvent) *GithubEventDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GithubEventClient) DeleteOneID(id int) *GithubEventDeleteOne {
	builder := c.Delete().Where(githubevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GithubEventDeleteOne{builder}
}

// Query returns a query builder for GithubEvent.
func (c *GithubEventClient) Query() *GithubEventQuery {
	return &GithubEventQuery{
		config: c.config,
	}
}

// Get returns a GithubEvent entity by its id.
func (c *GithubEventClient) Get(ctx context.Context, id int) (*GithubEvent, error) {
	return c.Query().Where(githubevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GithubEventClient) GetX(ctx context.Context, id int) *GithubEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GithubEventClient) Hooks() []Hook {
	hooks := c.hooks.GithubEvent
	return append(hooks[:len(hooks):len(hooks)], githubevent.Hooks[:]...)
}

// GithubRepositoryClient is a client for the GithubRepository schema.
type GithubRepositoryClient struct {
	config
}

// NewGithubRepositoryClient returns a client for the GithubRepository from the given config.
func NewGithubRepositoryClient(c config) *GithubRepositoryClient {
	return &GithubRepositoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `githubrepository.Hooks(f(g(h())))`.
func (c *GithubRepositoryClient) Use(hooks ...Hook) {
	c.hooks.GithubRepository = append(c.hooks.GithubRepository, hooks...)
}

// Create returns a builder for creating a GithubRepository entity.
func (c *GithubRepositoryClient) Create() *GithubRepositoryCreate {
	mutation := newGithubRepositoryMutation(c.config, OpCreate)
	return &GithubRepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GithubRepository entities.
func (c *GithubRepositoryClient) CreateBulk(builders ...*GithubRepositoryCreate) *GithubRepositoryCreateBulk {
	return &GithubRepositoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GithubRepository.
func (c *GithubRepositoryClient) Update() *GithubRepositoryUpdate {
	mutation := newGithubRepositoryMutation(c.config, OpUpdate)
	return &GithubRepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GithubRepositoryClient) UpdateOne(gr *GithubRepository) *GithubRepositoryUpdateOne {
	mutation := newGithubRepositoryMutation(c.config, OpUpdateOne, withGithubRepository(gr))
	return &GithubRepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GithubRepositoryClient) UpdateOneID(id int) *GithubRepositoryUpdateOne {
	mutation := newGithubRepositoryMutation(c.config, OpUpdateOne, withGithubRepositoryID(id))
	return &GithubRepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GithubRepository.
func (c *GithubRepositoryClient) Delete() *GithubRepositoryDelete {
	mutation := newGithubRepositoryMutation(c.config, OpDelete)
	return &GithubRepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GithubRepositoryClient) DeleteOne(gr *GithubRepository) *GithubRepositoryDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GithubRepositoryClient) DeleteOneID(id int) *GithubRepositoryDeleteOne {
	builder := c.Delete().Where(githubrepository.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GithubRepositoryDeleteOne{builder}
}

// Query returns a query builder for GithubRepository.
func (c *GithubRepositoryClient) Query() *GithubRepositoryQuery {
	return &GithubRepositoryQuery{
		config: c.config,
	}
}

// Get returns a GithubRepository entity by its id.
func (c *GithubRepositoryClient) Get(ctx context.Context, id int) (*GithubRepository, error) {
	return c.Query().Where(githubrepository.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GithubRepositoryClient) GetX(ctx context.Context, id int) *GithubRepository {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GithubRepositoryClient) Hooks() []Hook {
	hooks := c.hooks.GithubRepository
	return append(hooks[:len(hooks):len(hooks)], githubrepository.Hooks[:]...)
}

// LabelClient is a client for the Label schema.
type LabelClient struct {
	config
}

// NewLabelClient returns a client for the Label from the given config.
func NewLabelClient(c config) *LabelClient {
	return &LabelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `label.Hooks(f(g(h())))`.
func (c *LabelClient) Use(hooks ...Hook) {
	c.hooks.Label = append(c.hooks.Label, hooks...)
}

// Create returns a builder for creating a Label entity.
func (c *LabelClient) Create() *LabelCreate {
	mutation := newLabelMutation(c.config, OpCreate)
	return &LabelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Label entities.
func (c *LabelClient) CreateBulk(builders ...*LabelCreate) *LabelCreateBulk {
	return &LabelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Label.
func (c *LabelClient) Update() *LabelUpdate {
	mutation := newLabelMutation(c.config, OpUpdate)
	return &LabelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LabelClient) UpdateOne(l *Label) *LabelUpdateOne {
	mutation := newLabelMutation(c.config, OpUpdateOne, withLabel(l))
	return &LabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LabelClient) UpdateOneID(id int) *LabelUpdateOne {
	mutation := newLabelMutation(c.config, OpUpdateOne, withLabelID(id))
	return &LabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Label.
func (c *LabelClient) Delete() *LabelDelete {
	mutation := newLabelMutation(c.config, OpDelete)
	return &LabelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LabelClient) DeleteOne(l *Label) *LabelDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LabelClient) DeleteOneID(id int) *LabelDeleteOne {
	builder := c.Delete().Where(label.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LabelDeleteOne{builder}
}

// Query returns a query builder for Label.
func (c *LabelClient) Query() *LabelQuery {
	return &LabelQuery{
		config: c.config,
	}
}

// Get returns a Label entity by its id.
func (c *LabelClient) Get(ctx context.Context, id int) (*Label, error) {
	return c.Query().Where(label.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LabelClient) GetX(ctx context.Context, id int) *Label {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LabelClient) Hooks() []Hook {
	return c.hooks.Label
}
