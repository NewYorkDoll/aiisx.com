directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type GithubEvent implements Node {
  id: ID!
  eventID: String!
  eventType: String!
  createdAt: Time!
  public: Boolean!
  actorID: Int!
  actor: GithubUser!
  repoID: Int!
  repo: GithubEventRepo!
  payload: Map!
}
"""A connection to a list of items."""
type GithubEventConnection {
  """A list of edges."""
  edges: [GithubEventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubEventEdge {
  """The item at the end of the edge."""
  node: GithubEvent
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubEvent connections"""
input GithubEventOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubEvents."""
  field: GithubEventOrderField!
}
"""Properties by which GithubEvent connections can be ordered."""
enum GithubEventOrderField {
  EVENT_ID
  EVENT_TYPE
  CREATED_AT
  ACTOR_ID
  REPO_ID
}
"""
GithubEventWhereInput is used for filtering GithubEvent objects.
Input was generated by ent.
"""
input GithubEventWhereInput {
  not: GithubEventWhereInput
  and: [GithubEventWhereInput!]
  or: [GithubEventWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """event_id field predicates"""
  eventID: String
  eventIDNEQ: String
  eventIDIn: [String!]
  eventIDNotIn: [String!]
  eventIDGT: String
  eventIDGTE: String
  eventIDLT: String
  eventIDLTE: String
  eventIDContains: String
  eventIDHasPrefix: String
  eventIDHasSuffix: String
  eventIDEqualFold: String
  eventIDContainsFold: String
  """event_type field predicates"""
  eventType: String
  eventTypeNEQ: String
  eventTypeIn: [String!]
  eventTypeNotIn: [String!]
  eventTypeGT: String
  eventTypeGTE: String
  eventTypeLT: String
  eventTypeLTE: String
  eventTypeContains: String
  eventTypeHasPrefix: String
  eventTypeHasSuffix: String
  eventTypeEqualFold: String
  eventTypeContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """public field predicates"""
  public: Boolean
  publicNEQ: Boolean
  """actor_id field predicates"""
  actorID: Int
  actorIDNEQ: Int
  actorIDIn: [Int!]
  actorIDNotIn: [Int!]
  actorIDGT: Int
  actorIDGTE: Int
  actorIDLT: Int
  actorIDLTE: Int
  """repo_id field predicates"""
  repoID: Int
  repoIDNEQ: Int
  repoIDIn: [Int!]
  repoIDNotIn: [Int!]
  repoIDGT: Int
  repoIDGTE: Int
  repoIDLT: Int
  repoIDLTE: Int
}
type GithubRepository implements Node {
  id: ID!
  repoID: Int!
  name: String!
  fullName: String!
  ownerLogin: String!
  owner: GithubUser!
  public: Boolean!
  htmlURL: String!
  description: String
  fork: Boolean!
  homepage: String
  starCount: Int!
  defaultBranch: String!
  isTemplate: Boolean!
  hasIssues: Boolean!
  archived: Boolean!
  pushedAt: Time
  createdAt: Time!
  updatedAt: Time
  license: GithubLicense
}
"""A connection to a list of items."""
type GithubRepositoryConnection {
  """A list of edges."""
  edges: [GithubRepositoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubRepositoryEdge {
  """The item at the end of the edge."""
  node: GithubRepository
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubRepository connections"""
input GithubRepositoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubRepositories."""
  field: GithubRepositoryOrderField!
}
"""Properties by which GithubRepository connections can be ordered."""
enum GithubRepositoryOrderField {
  NAME
  FULL_NAME
  OWNER_LOGIN
  STAR_COUNT
  PUSHED_AT
  CREATED_AT
  UPDATED_AT
}
"""
GithubRepositoryWhereInput is used for filtering GithubRepository objects.
Input was generated by ent.
"""
input GithubRepositoryWhereInput {
  not: GithubRepositoryWhereInput
  and: [GithubRepositoryWhereInput!]
  or: [GithubRepositoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """repo_id field predicates"""
  repoID: Int
  repoIDNEQ: Int
  repoIDIn: [Int!]
  repoIDNotIn: [Int!]
  repoIDGT: Int
  repoIDGTE: Int
  repoIDLT: Int
  repoIDLTE: Int
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """owner_login field predicates"""
  ownerLogin: String
  ownerLoginNEQ: String
  ownerLoginIn: [String!]
  ownerLoginNotIn: [String!]
  ownerLoginGT: String
  ownerLoginGTE: String
  ownerLoginLT: String
  ownerLoginLTE: String
  ownerLoginContains: String
  ownerLoginHasPrefix: String
  ownerLoginHasSuffix: String
  ownerLoginEqualFold: String
  ownerLoginContainsFold: String
  """public field predicates"""
  public: Boolean
  publicNEQ: Boolean
  """html_url field predicates"""
  htmlURL: String
  htmlURLNEQ: String
  htmlURLIn: [String!]
  htmlURLNotIn: [String!]
  htmlURLGT: String
  htmlURLGTE: String
  htmlURLLT: String
  htmlURLLTE: String
  htmlURLContains: String
  htmlURLHasPrefix: String
  htmlURLHasSuffix: String
  htmlURLEqualFold: String
  htmlURLContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """fork field predicates"""
  fork: Boolean
  forkNEQ: Boolean
  """homepage field predicates"""
  homepage: String
  homepageNEQ: String
  homepageIn: [String!]
  homepageNotIn: [String!]
  homepageGT: String
  homepageGTE: String
  homepageLT: String
  homepageLTE: String
  homepageContains: String
  homepageHasPrefix: String
  homepageHasSuffix: String
  homepageIsNil: Boolean
  homepageNotNil: Boolean
  homepageEqualFold: String
  homepageContainsFold: String
  """star_count field predicates"""
  starCount: Int
  starCountNEQ: Int
  starCountIn: [Int!]
  starCountNotIn: [Int!]
  starCountGT: Int
  starCountGTE: Int
  starCountLT: Int
  starCountLTE: Int
  """default_branch field predicates"""
  defaultBranch: String
  defaultBranchNEQ: String
  defaultBranchIn: [String!]
  defaultBranchNotIn: [String!]
  defaultBranchGT: String
  defaultBranchGTE: String
  defaultBranchLT: String
  defaultBranchLTE: String
  defaultBranchContains: String
  defaultBranchHasPrefix: String
  defaultBranchHasSuffix: String
  defaultBranchEqualFold: String
  defaultBranchContainsFold: String
  """is_template field predicates"""
  isTemplate: Boolean
  isTemplateNEQ: Boolean
  """has_issues field predicates"""
  hasIssues: Boolean
  hasIssuesNEQ: Boolean
  """archived field predicates"""
  archived: Boolean
  archivedNEQ: Boolean
  """pushed_at field predicates"""
  pushedAt: Time
  pushedAtNEQ: Time
  pushedAtIn: [Time!]
  pushedAtNotIn: [Time!]
  pushedAtGT: Time
  pushedAtGTE: Time
  pushedAtLT: Time
  pushedAtLTE: Time
  pushedAtIsNil: Boolean
  pushedAtNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
}
type Label implements Node {
  id: ID!
}
"""
LabelWhereInput is used for filtering Label objects.
Input was generated by ent.
"""
input LabelWhereInput {
  not: LabelWhereInput
  and: [LabelWhereInput!]
  or: [LabelWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "aiisx.com/src/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  githubevents(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubEvents returned from the connection."""
    orderBy: GithubEventOrder

    """Filtering options for GithubEvents returned from the connection."""
    where: GithubEventWhereInput
  ): GithubEventConnection!
  githubrepositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubRepositories returned from the connection."""
    orderBy: GithubRepositoryOrder

    """Filtering options for GithubRepositories returned from the connection."""
    where: GithubRepositoryWhereInput
  ): GithubRepositoryConnection!
}
